<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBatis面试题</title>
    <url>/2021/12/11/MyBatis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="什么是MyBatis？"><a href="#什么是MyBatis？" class="headerlink" title="什么是MyBatis？"></a>什么是MyBatis？</h3><pre><code>答：MyBatis是一个可以自定义SQL、存储过程和高级映射的持久层框架。
</code></pre>
<span id="more"></span>

<h3 id="讲下MyBatis的缓存"><a href="#讲下MyBatis的缓存" class="headerlink" title="讲下MyBatis的缓存"></a>讲下MyBatis的缓存</h3><pre><code>答：MyBatis的缓存分为一级缓存和二级缓存，一级缓存放在session里面，默认就有，二级缓存放在它的命名空间里，默认是不打开的，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态)，可在它的映射文件中配置&lt;cache/&gt;；
</code></pre>
<h3 id="Mybatis是如何进行分页的？分页插件的原理是什么？"><a href="#Mybatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Mybatis是如何进行分页的？分页插件的原理是什么？"></a>Mybatis是如何进行分页的？分页插件的原理是什么？</h3><pre><code>答：
1）Mybatis使用RowBounds对象进行分页，也可以直接编写sql实现分页，也可以使用Mybatis的分页插件。
2）分页插件的原理：实现Mybatis提供的接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql。
举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10
</code></pre>
<h3 id="简述Mybatis的插件运行原理，以及如何编写一个插件？"><a href="#简述Mybatis的插件运行原理，以及如何编写一个插件？" class="headerlink" title="简述Mybatis的插件运行原理，以及如何编写一个插件？"></a>简述Mybatis的插件运行原理，以及如何编写一个插件？</h3><pre><code>答：
1）Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis通过动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。
2）实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。
</code></pre>
<h3 id="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"><a href="#Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？" class="headerlink" title="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"></a>Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？</h3><pre><code>答：
1）Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能。
2）Mybatis提供了9种动态sql标签：trim|where|set|foreach|if|choose|when|otherwise|bind。
3）其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。
</code></pre>
<h3 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h3><pre><code>答：
1）#&#123;&#125;是预编译处理，$&#123;&#125;是字符串替换。
2）Mybatis在处理#&#123;&#125;时，会将sql中的#&#123;&#125;替换为？号，调用PreparedStatement的set方法来赋值；
3）Mybatis在处理$&#123;&#125;时，就是把$&#123;&#125;替换成变量的值。
4）使用#&#123;&#125;可以有效的防止SQL注入，提高系统安全性。
</code></pre>
<h3 id="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h3><pre><code>答：Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。
</code></pre>
<h3 id="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h3><pre><code>答：
1）Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。
2）它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。
</code></pre>
<h3 id="MyBatis与Hibernate有哪些不同？"><a href="#MyBatis与Hibernate有哪些不同？" class="headerlink" title="MyBatis与Hibernate有哪些不同？"></a>MyBatis与Hibernate有哪些不同？</h3><pre><code>答：
1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句，不过mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。
2）Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。
3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的缺点是学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。
总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。
</code></pre>
<h3 id="MyBatis的好处是什么？"><a href="#MyBatis的好处是什么？" class="headerlink" title="MyBatis的好处是什么？"></a>MyBatis的好处是什么？</h3><pre><code>答：
1）MyBatis把sql语句从Java源程序中独立出来，放在单独的XML文件中编写，给程序的维护带来了很大便利。
2）MyBatis封装了底层JDBC API的调用细节，并能自动将结果集转换成Java Bean对象，大大简化了Java数据库编程的重复工作。
3）因为MyBatis需要程序员自己去编写sql语句，程序员可以结合数据库自身的特点灵活控制sql语句，因此能够实现比Hibernate等全自动orm框架更高的查询效率，能够完成复杂查询。
</code></pre>
<h3 id="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"><a href="#简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？" class="headerlink" title="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"></a>简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h3><pre><code>答：Mybatis将所有Xml配置信息都封装到All-In-One重量级对象Configuration内部。在Xml映射文件中，&lt;parameterMap&gt;标签会被解析为ParameterMap对象，其每个子元素会被解析为ParameterMapping对象。&lt;resultMap&gt;标签会被解析为ResultMap对象，其每个子元素会被解析为ResultMapping对象。每一个&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签均会被解析为MappedStatement对象，标签内的sql会被解析为BoundSql对象。
</code></pre>
<h3 id="什么是MyBatis的接口绑定，有什么好处？"><a href="#什么是MyBatis的接口绑定，有什么好处？" class="headerlink" title="什么是MyBatis的接口绑定，有什么好处？"></a>什么是MyBatis的接口绑定，有什么好处？</h3><pre><code>答：接口映射就是在MyBatis中任意定义接口，然后把接口里面的方法和SQL语句绑定，我们直接调用接口方法就可以，这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。
</code></pre>
<h3 id="接口绑定有几种实现方式，分别是怎么实现的？"><a href="#接口绑定有几种实现方式，分别是怎么实现的？" class="headerlink" title="接口绑定有几种实现方式，分别是怎么实现的？"></a>接口绑定有几种实现方式，分别是怎么实现的？</h3><pre><code>答：接口绑定有两种实现方式，一种是通过注解绑定，就是在接口的方法上面加上@Select@Update等注解里面包含Sql语句来绑定，另外一种就是通过xml里面写SQL来绑定，在这种情况下，要指定xml映射文件里面的namespace必须为接口的全路径名。
</code></pre>
<h3 id="什么情况下用注解绑定，什么情况下用xml绑定？"><a href="#什么情况下用注解绑定，什么情况下用xml绑定？" class="headerlink" title="什么情况下用注解绑定，什么情况下用xml绑定？"></a>什么情况下用注解绑定，什么情况下用xml绑定？</h3><pre><code>答：当Sql语句比较简单时候，用注解绑定；当SQL语句比较复杂时候，用xml绑定，一般用xml绑定的比较多。
</code></pre>
<h3 id="MyBatis实现一对一有几种方式？具体怎么操作的？"><a href="#MyBatis实现一对一有几种方式？具体怎么操作的？" class="headerlink" title="MyBatis实现一对一有几种方式？具体怎么操作的？"></a>MyBatis实现一对一有几种方式？具体怎么操作的？</h3><pre><code>答：有联合查询和嵌套查询，联合查询是几个表联合查询，只查询一次，通过在resultMap里面配置association节点配置一对一的类就可以完成；嵌套查询是先查一个表，根据这个表里面的结果的外键id，去再另外一个表里面查询数据，也是通过association配置，但另外一个表的查询通过select属性配置。
</code></pre>
<h3 id="Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别？"><a href="#Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别？" class="headerlink" title="Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别？"></a>Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别？</h3><pre><code>答：能，Mybatis不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把selectOne()修改为selectList()即可；多对多查询，其实就是一对多查询，只需要把selectOne()修改为selectList()即可。
关联对象查询，有两种实现方式，一种是单独发送一个sql去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用join查询，一部分列是A对象的属性值，另外一部分列是关联对象B的属性值，好处是只发一个sql查询，就可以把主对象和其关联对象查出来。
</code></pre>
<h3 id="MyBatis里面的动态Sql是怎么设定的？用什么语法？"><a href="#MyBatis里面的动态Sql是怎么设定的？用什么语法？" class="headerlink" title="MyBatis里面的动态Sql是怎么设定的？用什么语法？"></a>MyBatis里面的动态Sql是怎么设定的？用什么语法？</h3><pre><code>答：MyBatis里面的动态Sql一般是通过if节点来实现,通过OGNL语法来实现,但是如果要写的完整,必须配合where,trim节点,where节点是判断包含节点有内容就插入where,否则不插入,trim节点是用来判断如果动态语句是以and 或or开始,那么会自动把这个and或者or取掉。
</code></pre>
<h3 id="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h3><pre><code>答：
1）使用&lt;resultMap&gt;标签，逐一定义列名和对象属性名之间的映射关系。
2）使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。
有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。
</code></pre>
<h3 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h3><pre><code>答：还有很多其他的标签，&lt;resultMap&gt;、&lt;parameterMap&gt;、&lt;sql&gt;、&lt;include&gt;、&lt;selectKey&gt;，加上动态sql的9个标签，trim|where|set|foreach|if|choose|when|otherwise|bind等，其中&lt;sql&gt;为sql片段标签，通过&lt;include&gt;标签引入sql片段，&lt;selectKey&gt;为不支持自增的主键生成策略标签。
</code></pre>
<h3 id="当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定pojo？"><a href="#当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定pojo？" class="headerlink" title="当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定pojo？"></a>当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定pojo？</h3><pre><code>答：
1）通过在查询的sql语句中定义字段名的别名。
2）通过&lt;resultMap&gt;来映射字段名和实体类属性名的一一对应的关系。
</code></pre>
<h3 id="模糊查询like语句该怎么写？"><a href="#模糊查询like语句该怎么写？" class="headerlink" title="模糊查询like语句该怎么写？"></a>模糊查询like语句该怎么写？</h3><pre><code>答：
1）在java中拼接通配符，通过#&#123;&#125;赋值
2）在Sql语句中拼接通配符 （不安全 会引起Sql注入）
</code></pre>
<h3 id="通常一个Xml映射文件，都会写一个Dao接口与之对应-Dao的工作原理，是否可以重载？"><a href="#通常一个Xml映射文件，都会写一个Dao接口与之对应-Dao的工作原理，是否可以重载？" class="headerlink" title="通常一个Xml映射文件，都会写一个Dao接口与之对应, Dao的工作原理，是否可以重载？"></a>通常一个Xml映射文件，都会写一个Dao接口与之对应, Dao的工作原理，是否可以重载？</h3><pre><code>答：不能重载，因为通过Dao寻找Xml对应的sql的时候全限名+方法名的保存和寻找策略。接口工作原理为jdk动态代理原理，运行时会为dao生成proxy，代理对象会拦截接口方法，去执行对应的sql返回数据。
</code></pre>
<h3 id="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"><a href="#Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"></a>Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h3><pre><code>答：虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，Mybatis都可以正确识别。原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。
</code></pre>
<h3 id="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"><a href="#Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？" class="headerlink" title="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"></a>Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h3><pre><code>答：不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。原因就是namespace+id是作为Map&lt;String, MappedStatement&gt;的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。
</code></pre>
<h3 id="Mybatis中如何执行批处理？"><a href="#Mybatis中如何执行批处理？" class="headerlink" title="Mybatis中如何执行批处理？"></a>Mybatis中如何执行批处理？</h3><pre><code>答：使用BatchExecutor完成批处理。
</code></pre>
<h3 id="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"><a href="#Mybatis都有哪些Executor执行器？它们之间的区别是什么？" class="headerlink" title="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"></a>Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h3><pre><code>答：Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。
1）SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
2）ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map。
3）BatchExecutor：完成批处理。
</code></pre>
<h3 id="Mybatis中如何指定使用哪一种Executor执行器？"><a href="#Mybatis中如何指定使用哪一种Executor执行器？" class="headerlink" title="Mybatis中如何指定使用哪一种Executor执行器？"></a>Mybatis中如何指定使用哪一种Executor执行器？</h3><pre><code>答：在Mybatis配置文件中，可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数。
</code></pre>
<h3 id="Mybatis执行批量插入，能返回数据库主键列表吗？"><a href="#Mybatis执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="Mybatis执行批量插入，能返回数据库主键列表吗？"></a>Mybatis执行批量插入，能返回数据库主键列表吗？</h3><pre><code>答：能，JDBC都能，Mybatis当然也能。
</code></pre>
<h3 id="Mybatis是否可以映射Enum枚举类？"><a href="#Mybatis是否可以映射Enum枚举类？" class="headerlink" title="Mybatis是否可以映射Enum枚举类？"></a>Mybatis是否可以映射Enum枚举类？</h3><pre><code>答：Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。
</code></pre>
<h3 id="如何获取自动生成的-主-键值？"><a href="#如何获取自动生成的-主-键值？" class="headerlink" title="如何获取自动生成的(主)键值？"></a>如何获取自动生成的(主)键值？</h3><pre><code>答：配置文件设置usegeneratedkeys 为true。
</code></pre>
<h3 id="在mapper中如何传递多个参数？"><a href="#在mapper中如何传递多个参数？" class="headerlink" title="在mapper中如何传递多个参数？"></a>在mapper中如何传递多个参数？</h3><pre><code>答：
1）直接在方法中传递参数，xml文件用#&#123;0&#125; #&#123;1&#125;来获取。
2）使用 @param 注解:这样可以直接在xml文件中通过#&#123;name&#125;来获取。
</code></pre>
<h3 id="resultType-resultMap的区别？"><a href="#resultType-resultMap的区别？" class="headerlink" title="resultType resultMap的区别？"></a>resultType resultMap的区别？</h3><pre><code>答：
1）类的名字和数据库相同时，可以直接设置resultType参数为Pojo类。
2）若不同，需要设置resultMap 将结果名字和Pojo名字进行转换。
</code></pre>
<h3 id="使用MyBatis的mapper接口调用时有哪些要求？"><a href="#使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求？"></a>使用MyBatis的mapper接口调用时有哪些要求？</h3><pre><code>答：
1）Mapper接口方法名和mapper.xml中定义的每个sql的id相同。
2）Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同。
3）Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同。
4）Mapper.xml文件中的namespace即是mapper接口的类路径。
</code></pre>
<h3 id="Mybatis比IBatis比较大的几个改进是什么？"><a href="#Mybatis比IBatis比较大的几个改进是什么？" class="headerlink" title="Mybatis比IBatis比较大的几个改进是什么？"></a>Mybatis比IBatis比较大的几个改进是什么？</h3><pre><code>答：
1）有接口绑定,包括注解绑定sql和xml绑定Sql。
2）动态sql由原来的节点配置变成OGNL表达式。
3）在一对一,一对多的时候引进了association,在一对多的时候引入了collection节点,不过都是在resultMap里面配置。
</code></pre>
<h3 id="IBatis和MyBatis在核心处理类分别叫什么？"><a href="#IBatis和MyBatis在核心处理类分别叫什么？" class="headerlink" title="IBatis和MyBatis在核心处理类分别叫什么？"></a>IBatis和MyBatis在核心处理类分别叫什么？</h3><pre><code>答：IBatis里面的核心处理类交SqlMapClient,MyBatis里面的核心处理类叫做SqlSession。
</code></pre>
<h3 id="IBatis和MyBatis在细节上的不同有哪些？"><a href="#IBatis和MyBatis在细节上的不同有哪些？" class="headerlink" title="IBatis和MyBatis在细节上的不同有哪些？"></a>IBatis和MyBatis在细节上的不同有哪些？</h3><pre><code>答：
1）在sql里面变量命名有原来的#变量# 变成了#&#123;变量&#125;。
2）原来的$变量$变成了$&#123;变量&#125;。
3）原来在sql节点里面的class都换名字交type。
4）原来的queryForObject queryForList 变成了selectOne selectList5）原来的别名设置在映射文件里面放在了核心配置文件里。
</code></pre>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudAlibaba（一）</title>
    <url>/2021/12/06/SpringCloudAlibaba%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第一章-微服务介绍"><a href="#第一章-微服务介绍" class="headerlink" title="第一章 微服务介绍"></a>第一章 微服务介绍</h1><h2 id="系统架构演变"><a href="#系统架构演变" class="headerlink" title="系统架构演变"></a>系统架构演变</h2><p>随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。<br>从互联网早起到现在，系统架构大体经历了下面几个过程: 单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;微服务架构，当然还有悄然兴起的Service Mesh(服务网格化)。<br>接下来我们就来了解一下每种系统架构是什么样子的， 以及各有什么优缺点。</p>
<span id="more"></span>

<h3 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h3><p>互联网早期，一般的网站应用流量较小，只需一个应用，将所有功能代码都部署在一起就可以，这样可以减少开发、部署和维护的成本。<br>比如说一个电商系统，里面会包含很多用户管理，商品管理，订单管理，物流管理等等很多模块，我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112202027449.png" alt="单体应用架构图">  </p>
<p><strong>优点：</strong></p>
<ul>
<li>项目架构简单，小型项目的话， 开发成本低  </li>
<li>项目部署在一个节点上， 维护方便 </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>全部功能集成在一个工程中，对于大型项目来讲不易开发和维护  </li>
<li>项目模块之间紧密耦合，单点容错率低  </li>
<li>无法针对不同模块进行针对性优化和水平扩展  </li>
</ul>
<h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>随着访问量的逐渐增大，单一应用只能依靠增加节点来应对，但是这时候会发现并不是所有的模块都会有比较大的访问量。<br>还是以上面的电商为例子， 用户访问量的增加可能影响的只是用户和订单模块， 但是对消息模块的影响就比较小. 那么此时我们希望只多增加几个订单模块， 而不增加消息模块. 此时单体应用就做不到了， 垂直应用就应运而生了。<br>所谓的垂直应用架构，就是将原来的一个应用拆成互不相干的几个应用，以提升效率。比如我们可以将上面电商的单体应用拆分成:  </p>
<ul>
<li>电商系统(用户管理 商品管理 订单管理)  </li>
<li>后台系统(用户管理 订单管理 客户管理)  </li>
<li>CMS系统(广告管理 营销管理)<br>这样拆分完毕之后，一旦用户访问量变大，只需要增加电商系统的节点就可以了，而无需增加后台和CMS的节点。  </li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112202116512.png" alt="垂直应用架构图"><br><strong>优点：</strong></p>
<ul>
<li>系统拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平扩展  </li>
<li>一个系统的问题不会影响到其他系统，提高容错率  </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>系统之间相互独立， 无法进行相互调用  </li>
<li>系统之间相互独立， 会有重复的开发任务  </li>
</ul>
<h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><p>当垂直应用越来越多，重复的业务代码就会越来越多。这时候，我们就思考可不可以将重复的代码抽取出来，做成统一的业务层作为独立的服务，然后由前端控制层调用不同的业务层服务呢？<br>这就产生了新的分布式系统架构。它将把工程拆分成表现层和服务层两个部分，服务层中包含业务逻辑。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112202346455.png" alt="分布式架构图"><br><strong>优点：</strong></p>
<ul>
<li>抽取公共的功能为服务层，提高代码复用性  </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>系统间耦合度变高，调用关系错综复杂，难以维护  </li>
</ul>
<h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><p>在分布式架构下，当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心对集群进行实时管理。此时，用于资源调度和治理中心(SOA Service Oriented Architecture，面向服务的架构)是关键。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112202349923.png" alt="SOA架构图"><br><strong>优点：</strong></p>
<ul>
<li>使用注册中心解决了服务间调用关系的自动调节  </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>服务间会有依赖关系，一旦某个环节出错会影响较大( 服务雪崩 )  </li>
<li>服务关心复杂，运维、测试部署困难  </li>
</ul>
<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构在某种程度上是面向服务的架构SOA继续发展的下一步，它更加强调服务的”彻底拆分”。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112202351895.png" alt="微服务架构图"><br><strong>优点：</strong></p>
<ul>
<li>服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展  </li>
<li>微服务之间采用Restful等轻量级http协议相互调用    </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>分布式系统开发的技术成本高（容错、分布式事务等）  </li>
</ul>
<h2 id="微服务架构介绍"><a href="#微服务架构介绍" class="headerlink" title="微服务架构介绍"></a>微服务架构介绍</h2><p>微服务架构， 简单的说就是将单体应用进一步拆分，拆分成更小的服务，每个服务都是一个可以独立运行的项目。  </p>
<h3 id="微服务架构的常见问题"><a href="#微服务架构的常见问题" class="headerlink" title="微服务架构的常见问题"></a>微服务架构的常见问题</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题：  </p>
<ul>
<li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])  </li>
<li>这么多小服务，他们之间如何通讯？(restful rpc)  </li>
<li>这么多小服务，客户端怎么访问他们？(网关)  </li>
<li>这么多小服务，一旦出现问题了，应该如何自处理？(容错)  </li>
<li>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)  </li>
</ul>
<p>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。   </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112210016794.png"></p>
<h3 id="微服务架构的常见概念"><a href="#微服务架构的常见概念" class="headerlink" title="微服务架构的常见概念"></a>微服务架构的常见概念</h3><h4 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h4><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。   </p>
<ul>
<li><strong>服务注册：</strong> 服务实例将自身服务信息注册到注册中心。  </li>
<li><strong>服务发现：</strong> 服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。  </li>
<li><strong>服务剔除：</strong> 服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212339792.png">  </li>
</ul>
<h4 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h4><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于HTTP的RESTful接口以及基于TCP的RPC协议。  </p>
<ul>
<li>REST(Representational State Transfer)<br>这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议  </li>
<li>RPC(Remote Promote Call)<br>一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。  </li>
</ul>
<p><strong>区别与联系</strong>  </p>
<table>
<thead>
<tr>
<th>比较项</th>
<th>RESTful</th>
<th>RPC</th>
</tr>
</thead>
<tbody><tr>
<td>通讯协议</td>
<td>HTTP</td>
<td>一般使用TCP</td>
</tr>
<tr>
<td>性能</td>
<td>略低</td>
<td>较高</td>
</tr>
<tr>
<td>灵活度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>应用</td>
<td>微服务架构</td>
<td>SOA架构</td>
</tr>
</tbody></table>
<h4 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h4><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：  </p>
<ul>
<li>客户端需要调用不同的url地址，增加难度</li>
<li>在一定的场景下，存在跨域请求的问题</li>
<li>每个微服务都需要进行单独的身份认证  </li>
</ul>
<p>针对这些问题，API网关顺势而生。<br>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212345475.png">  </p>
<h4 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h4><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。<br>我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是：  </p>
<ul>
<li>不被外界环境影响  </li>
<li>不被上游请求压垮  </li>
<li>不被下游响应拖垮<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212347368.png">  </li>
</ul>
<h4 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪。<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212347864.png">  </p>
<h3 id="微服务架构的常见解决方案"><a href="#微服务架构的常见解决方案" class="headerlink" title="微服务架构的常见解决方案"></a>微服务架构的常见解决方案</h3><h4 id="ServiceComb"><a href="#ServiceComb" class="headerlink" title="ServiceComb"></a>ServiceComb</h4><p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212348047.png"><br>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。  </p>
<h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212349346.png"><br>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。<br>Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。  </p>
<h4 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h4><p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112212349986.png"><br>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。  </p>
<h2 id="SpringCloud-Alibaba介绍"><a href="#SpringCloud-Alibaba介绍" class="headerlink" title="SpringCloud Alibaba介绍"></a>SpringCloud Alibaba介绍</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。<br>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。  </p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux、OpenFeign、RestTemplate、Spring Cloud、Gateway、Zuul、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。  </li>
<li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>
<li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>
<li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>
<li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li>
<li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>
<li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker（schedulerx-client）上执行。</li>
<li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。  </li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li><strong>Sentinel</strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li>
<li><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li>
<li><strong>RocketMQ</strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li>
<li><strong>Dubbo</strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li>
<li><strong>Seata</strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li>
<li><strong>Alibaba Cloud ACM</strong>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li>
<li><strong>Alibaba Cloud OSS</strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>
<li><strong>Alibaba Cloud SchedulerX</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li>
<li><strong>Alibaba Cloud SMS</strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。 </li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 新特性</title>
    <url>/2021/12/06/ES6%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="let-和const-命令"><a href="#let-和const-命令" class="headerlink" title="let 和const 命令"></a>let 和const 命令</h2><ul>
<li>var    设置的变量会变成全局变量，循环外也可以调用。</li>
<li>let    设置的变量为局部变量，循环外无法调用。</li>
<li>const  设置的变量为final 变量，初始化后就无法进行修改。<span id="more"></span></li>
</ul>
<h2 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//解析数组</span><br><span class="line"><span class="built_in">let</span> arr = [1,2,3,4];</span><br><span class="line">//获得数组中的第一位和第二位元素并且分别赋值给x,y</span><br><span class="line"><span class="built_in">let</span> [x,y] = arr;</span><br><span class="line">console.log(<span class="string">&quot;x -&gt; &quot;</span> + x);</span><br><span class="line">console.log(<span class="string">&quot;y -&gt; &quot;</span> + y);</span><br><span class="line">//获得数组中的第三位和第四位元素并且分别赋值给a,b</span><br><span class="line"><span class="built_in">let</span>[,,a,b] = arr;</span><br><span class="line">console.log(<span class="string">&quot;a -&gt; &quot;</span> + a);</span><br><span class="line">console.log(<span class="string">&quot;b -&gt; &quot;</span> + b);</span><br><span class="line">//获得数组中的除了第一个元素外的所有其他元素并且赋值给rest</span><br><span class="line"><span class="built_in">let</span> [,...rest] = arr;</span><br><span class="line">console.log(<span class="string">&quot;rest -&gt; &quot;</span> + rest);</span><br><span class="line"></span><br><span class="line">//解析对象</span><br><span class="line"><span class="built_in">let</span> p = &#123;name:<span class="string">&quot;jack&quot;</span>, age: 21, gril: &#123;name: <span class="string">&quot;rose&quot;</span>, age: 18&#125;&#125;;</span><br><span class="line">//获得对象中指定key 的值，参数名需要与key 一致</span><br><span class="line"><span class="built_in">let</span> &#123;name,age&#125; = p;</span><br><span class="line">console.log(<span class="string">&quot;name -&gt; &quot;</span> + name);</span><br><span class="line">console.log(<span class="string">&quot;age -&gt; &quot;</span> + age);</span><br><span class="line">//获得对象中指定key 的值，同时将该值赋给自定义参数n</span><br><span class="line"><span class="built_in">let</span> &#123;name:n&#125; = p;</span><br><span class="line">console.log(<span class="string">&quot;n -&gt; &quot;</span> + n);</span><br><span class="line">//获得p 对象中的gril 对象的gname 参数的值</span><br><span class="line"><span class="built_in">let</span> &#123;gril:&#123;gname&#125;&#125; = p;</span><br><span class="line">console.log(<span class="string">&quot;gname -&gt; &quot;</span> + gname);</span><br><span class="line">//将p对象的值拷贝到obj 对象中，obj与p的值完全一样，但是地址不同，是一个新的对象</span><br><span class="line"><span class="built_in">let</span> &#123;...obj&#125; = p;</span><br><span class="line"><span class="built_in">let</span> obj2 = p;</span><br><span class="line">console.log(obj == p);  //<span class="literal">false</span></span><br><span class="line">console.log(obj2 == p); //<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//创建一个函数 const 函数名 = (参数) =&gt; 操作</span><br><span class="line">const add = (a,b) =&gt; a + b;</span><br><span class="line">console.log(add(1,2)); //3</span><br><span class="line">            </span><br><span class="line">//创建对象中的函数</span><br><span class="line">const p = &#123;</span><br><span class="line">    name: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age: 21,</span><br><span class="line">    <span class="function"><span class="title">sayHello</span></span>()&#123;</span><br><span class="line">         console.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">p.sayHello(); //hello</span><br><span class="line"></span><br><span class="line">//函数优化 + 解构表达式</span><br><span class="line">const person = &#123;</span><br><span class="line">    name: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    age: 21</span><br><span class="line">&#125;</span><br><span class="line">const hello = (&#123;name,age&#125;) =&gt; console.log(name, age);</span><br><span class="line">hello(person); //jack 21</span><br></pre></td></tr></table></figure>

<h2 id="map-和-reduce"><a href="#map-和-reduce" class="headerlink" title="map 和 reduce"></a>map 和 reduce</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//将数组中的string 类型数据转换为int 类型</span><br><span class="line"><span class="built_in">let</span> arr = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>];</span><br><span class="line"><span class="built_in">let</span> arr2 = arr.map(s =&gt; parseInt(s));</span><br><span class="line"></span><br><span class="line">//将数组中的所有数据求和</span><br><span class="line">console.log(arr2.reduce((a,b) =&gt; a + b)); //15</span><br><span class="line">//将数组中的所有数据求和(给定一个初始值)</span><br><span class="line">console.log(arr2.reduce((a,b) =&gt; a + b, 5)); //20</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudAlibaba（三）</title>
    <url>/2021/12/06/SpringCloudAlibaba%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第三章-Nacos-Discovery–服务治理"><a href="#第三章-Nacos-Discovery–服务治理" class="headerlink" title="第三章 Nacos Discovery–服务治理"></a>第三章 Nacos Discovery–服务治理</h1><p>先来思考一个问题<br>通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址（ip，端口）等硬编码到了代码中，这种做法存在许多问题：  </p>
<ul>
<li>一旦服务提供者地址变化，就需要手工修改代码  </li>
<li>一旦是多个服务提供者，无法实现负载均衡功能  </li>
<li>一旦服务变得越来越多，人工维护调用关系困难<br>那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。  </li>
</ul>
<span id="more"></span>
<h2 id="服务治理介绍"><a href="#服务治理介绍" class="headerlink" title="服务治理介绍"></a>服务治理介绍</h2><p>服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。  </p>
<ul>
<li><strong>服务注册</strong>：在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。  </li>
<li><strong>服务发现</strong>：服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问。<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231330806.png"><br>通过上面的调用图会发现，除了微服务，还有一个组件是服务注册中心，它是微服务架构非常重要的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能：  </li>
</ul>
<ol>
<li>服务发现：  <ul>
<li>服务注册：保存服务提供者和服务调用者的信息  </li>
<li>服务订阅：服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息  </li>
</ul>
</li>
<li>服务配置：  <ul>
<li>配置订阅：服务提供者和服务调用者订阅微服务相关的配置  </li>
<li>配置下发：主动将配置推送给服务提供者和服务调用者</li>
</ul>
</li>
<li>服务健康检测：<ul>
<li>检测服务提供者的健康情况，如果发现异常，执行服务剔除  </li>
</ul>
</li>
</ol>
<p>常见的注册中心  </p>
<ul>
<li><p><strong>Zookeeper</strong><br>zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。  </p>
</li>
<li><p><strong>Eureka</strong><br>Eureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭源  </p>
</li>
<li><p><strong>Consul</strong><br>Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现和配置管理的功能。Consul的功能都很实用，其中包括：服务注册/发现、健康检查、Key/Value存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。  </p>
</li>
<li><p><strong>Nacos</strong><br>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos=eureka+config。  </p>
</li>
</ul>
<h2 id="nacos简介"><a href="#nacos简介" class="headerlink" title="nacos简介"></a>nacos简介</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>从上面的介绍就可以看出，nacos的作用就是一个注册中心，用来管理注册上来的各个微服务。</p>
<h2 id="nacos实战入门"><a href="#nacos实战入门" class="headerlink" title="nacos实战入门"></a>nacos实战入门</h2><p>接下来，我们就在现有的环境中加入nacos，并将我们的两个微服务注册上去。  </p>
<h3 id="搭建nacos环境"><a href="#搭建nacos环境" class="headerlink" title="搭建nacos环境"></a>搭建nacos环境</h3><ol>
<li><p>安装nacos  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载地址: https://github.com/alibaba/nacos/releases</span><br><span class="line">下载zip格式的安装包，然后进行解压缩操作</span><br></pre></td></tr></table></figure></li>
<li><p>启动nacos  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#切换目录</span><br><span class="line">cd nacos/bin</span><br><span class="line">#命令启动</span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li>
<li><p>访问nacos  </p>
</li>
</ol>
<p>打开浏览器输入<a href="http://localhost:8848/nacos%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%EF%BC%8C">http://localhost:8848/nacos，即可访问服务，</a> 默认密码是nacos/nacos<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231338618.png">  </p>
<h3 id="将商品微服务注册到nacos"><a href="#将商品微服务注册到nacos" class="headerlink" title="将商品微服务注册到nacos"></a>将商品微服务注册到nacos</h3><p>接下来开始修改shop-product 模块的代码， 将其注册到nacos服务上  </p>
<ol>
<li><p>在pom.xml中添加nacos的依赖  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--nacos客户端--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在主类上添加@EnableDiscoveryClient注解  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProductApplication</span><br></pre></td></tr></table></figure></li>
<li><p>在application.yml中添加nacos服务的地址  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    cloud:</span><br><span class="line">        nacos:</span><br><span class="line">            discovery:</span><br><span class="line">                server-addr: 127.0.0.1:8848</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务， 观察nacos的控制面板中是否有注册上来的商品微服务  </p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231341003.png">  </p>
<h3 id="将订单微服务注册到nacos"><a href="#将订单微服务注册到nacos" class="headerlink" title="将订单微服务注册到nacos"></a>将订单微服务注册到nacos</h3><p>接下来开始修改shop_order 模块的代码， 将其注册到nacos服务上</p>
<ol>
<li><p>在pom.xml中添加nacos的依赖  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--nacos客户端--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在主类上添加@EnableDiscoveryClient注解  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class OrderApplication</span><br></pre></td></tr></table></figure></li>
<li><p>在application.yml中添加nacos服务的地址  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    cloud:</span><br><span class="line">        nacos:</span><br><span class="line">            discovery:</span><br><span class="line">                server-addr: 127.0.0.1:8848</span><br></pre></td></tr></table></figure></li>
<li><p>修改OrderController， 实现微服务调用  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line">    //准备买1件商品</span><br><span class="line">    @GetMapping(<span class="string">&quot;/order/prod/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Order order(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);</span><br><span class="line">        //从nacos中获取服务地址</span><br><span class="line">        ServiceInstance serviceInstance = discoveryClient.getInstances(<span class="string">&quot;service-product&quot;</span>).get(0);</span><br><span class="line">        String url = serviceInstance.getHost() + <span class="string">&quot;:&quot;</span> + serviceInstance.getPort();</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;从nacos中获取到的微服务地址为:&quot;</span> + url);</span><br><span class="line">        //通过restTemplate调用商品微服务</span><br><span class="line">        Product product = restTemplate.getForObject(<span class="string">&quot;http://&quot;</span> + url + <span class="string">&quot;/product/&quot;</span> + pid, Product.class);</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUid(1);</span><br><span class="line">        order.setUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        order.setPid(product.getPid());</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(1);</span><br><span class="line">        orderService.save(order);</span><br><span class="line">        <span class="built_in">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> DiscoveryClient是专门负责服务注册和发现的，我们可以通过它获取到注册到注册中心的所有服务</p>
</li>
</ol>
<ol start="5">
<li>启动服务， 观察nacos的控制面板中是否有注册上来的订单微服务，然后通过访问消费者服务验证调用是否成功  </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231346689.png">  </p>
<h2 id="实现服务调用的负载均衡"><a href="#实现服务调用的负载均衡" class="headerlink" title="实现服务调用的负载均衡"></a>实现服务调用的负载均衡</h2><h3 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h3><p>通俗的讲， 负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器,组件）上进行执行。<br>根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。<br>服务端负载均衡指的是发生在服务提供者一方,比如常见的nginx负载均衡。<br>而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。<br><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231347156.png"><br>我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行。  </p>
<h3 id="自定义实现负载均衡"><a href="#自定义实现负载均衡" class="headerlink" title="自定义实现负载均衡"></a>自定义实现负载均衡</h3><ol>
<li>通过idea再启动一个shop-product 微服务，设置其端口为8082  </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231347310.png">  </p>
<ol start="2">
<li>通过nacos查看微服务的启动情况  </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231348398.png">  </p>
<ol start="3">
<li>修改shop-order 的代码，实现负载均衡  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    //准备买1件商品</span><br><span class="line">    @GetMapping(<span class="string">&quot;/order/prod/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Order order(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);</span><br><span class="line">        //从nacos中获取服务地址</span><br><span class="line">        //自定义规则实现随机挑选服务</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;serviceproduct&quot;</span>);</span><br><span class="line">        int index = new Random().nextInt(instances.size());</span><br><span class="line">        ServiceInstance serviceInstance = instances.get(index);</span><br><span class="line">        String url = serviceInstance.getHost() + <span class="string">&quot;:&quot;</span> +serviceInstance.getPort();</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;从nacos中获取到的微服务地址为:&quot;</span> + url);</span><br><span class="line">        //通过restTemplate调用商品微服务</span><br><span class="line">        Product product = restTemplate.getForObject(<span class="string">&quot;http://&quot;</span> + url + <span class="string">&quot;/product/&quot;</span> + pid, Product.class);</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;商品信息，查询结果:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUid(1);</span><br><span class="line">        order.setUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        order.setPid(product.getPid());</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(1);</span><br><span class="line">        orderService.save(order);</span><br><span class="line">        <span class="built_in">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动两个服务提供者和一个服务消费者，多访问几次消费者测试效果  </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231350072.png">  </p>
<h3 id="基于Ribbon实现负载均衡"><a href="#基于Ribbon实现负载均衡" class="headerlink" title="基于Ribbon实现负载均衡"></a>基于Ribbon实现负载均衡</h3><p>Ribbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡  </p>
<ol>
<li>在RestTemplate 的生成方法上添加@LoadBalanced注解  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate <span class="function"><span class="title">restTemplate</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改服务调用的方法  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line"></span><br><span class="line">    //准备买1件商品</span><br><span class="line">    @GetMapping(<span class="string">&quot;/order/prod/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Order order(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);</span><br><span class="line">        //直接使用微服务名字， 从nacos中获取服务地址</span><br><span class="line">        String url = <span class="string">&quot;service-product&quot;</span>;</span><br><span class="line">        //通过restTemplate调用商品微服务</span><br><span class="line">        Product product = restTemplate.getForObject(<span class="string">&quot;http://&quot;</span> + url + <span class="string">&quot;/product/&quot;</span> + pid, Product.class);</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;商品信息，查询结果:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUid(1);</span><br><span class="line">        order.setUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        order.setPid(product.getPid());</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(1);</span><br><span class="line">        orderService.save(order);</span><br><span class="line">        <span class="built_in">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Ribbon支持的负载均衡策略：</strong><br>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示:  </p>
<table>
<thead>
<tr>
<th>策略名</th>
<th>策略描述</th>
<th>实现说明</th>
</tr>
</thead>
<tbody><tr>
<td>BestAvailableRule</td>
<td>选择一个最小的并发请求的server</td>
<td>逐个考察Server，如果Server被tripped了，则忽略，在选择其中ActiveRequestsCount最小的server</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（activeconnections 超过配置的阈值）</td>
<td>使用一AvailabilityPredicate来包含过滤server的逻辑，其实就就是检查status里记录的各个server的运行状态</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>根据相应时间分配一个weight，相应时间越长，weight越小，被选中的可能性越低。</td>
<td>一个后台线程定期的从status里面读取评价响应时间，为每个server计算一个weight。Weight的计算也比较简单responsetime 减去每个server自己平均的responsetime是server的权重。当刚开始运行，没有形成statas时，使用roubine策略选择server。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>对选定的负载均衡策略机上重试机制。</td>
<td>在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</td>
</tr>
<tr>
<td>RoundRobinRule</td>
<td>轮询方式轮询选择server</td>
<td>轮询index，选择index对应位置的server</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个server</td>
<td>在index上随机，选择index对应位置的server</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>复合判断server所在区域的性能和server的可用性选择server</td>
<td>使用ZoneAvoidancePredicate和AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</td>
</tr>
</tbody></table>
<p>我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service-product: <span class="comment"># 调用的提供者的名称</span></span><br><span class="line">    ribbon:</span><br><span class="line">        NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure>

<h2 id="基于Feign实现服务调用"><a href="#基于Feign实现服务调用" class="headerlink" title="基于Feign实现服务调用"></a>基于Feign实现服务调用</h2><h3 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h3><p>Feign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务一样简单， 只需要创建一个接口并添加一个注解即可。<br>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负载均衡的效果。  </p>
<h3 id="Feign的使用"><a href="#Feign的使用" class="headerlink" title="Feign的使用"></a>Feign的使用</h3><ol>
<li>加入Fegin的依赖  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--fegin组件--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在主类上添加Fegin的注解  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients//开启Fegin</span><br><span class="line">public class OrderApplication &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建一个service， 并使用Fegin实现微服务调用  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@FeignClient(<span class="string">&quot;service-product&quot;</span>)//声明调用的提供者的name</span><br><span class="line">public interface ProductService &#123;</span><br><span class="line"></span><br><span class="line">    //指定调用提供者的哪个方法</span><br><span class="line">    //@FeignClient+@GetMapping 就是一个完整的请求路径 http://serviceproduct/product/&#123;pid&#125;</span><br><span class="line">    @GetMapping(value = <span class="string">&quot;/product/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    Product findByPid(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改controller代码，并启动验证  </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductService productService;</span><br><span class="line"></span><br><span class="line">    //准备买1件商品</span><br><span class="line">    @GetMapping(<span class="string">&quot;/order/prod/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Order order(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;客户下单,这时候要调用商品微服务查询商品信息&quot;</span>);</span><br><span class="line">        //通过fegin调用商品微服务</span><br><span class="line">        Product product = productService.findByPid(pid);</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUid(1);</span><br><span class="line">        order.setUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        order.setPid(product.getPid());</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(1);</span><br><span class="line">        orderService.save(order);</span><br><span class="line">        <span class="built_in">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启order微服务,查看效果  </li>
</ol>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudAlibaba（二）</title>
    <url>/2021/12/06/SpringCloudAlibaba%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第二章-微服务环境搭建"><a href="#第二章-微服务环境搭建" class="headerlink" title="第二章 微服务环境搭建"></a>第二章 微服务环境搭建</h1><p>本次使用电商项目中的商品、订单、用户为案例进行讲解。    </p>
<span id="more"></span>
<h2 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h2><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>maven：3.3.9<br>数据库：MySQL 5.7<br>持久层: SpingData Jpa<br>其他: SpringCloud Alibaba 技术栈    </p>
<h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><p>springcloud-alibaba 父工程<br>shop-common 公共模块【实体类】<br>shop-user 用户微服务 【端口: 807x】<br>shop-product 商品微服务 【端口: 808x】<br>shop-order 订单微服务 【端口: 809x】 </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231241256.png" alt="模块设计图">    </p>
<h3 id="微服务调用"><a href="#微服务调用" class="headerlink" title="微服务调用"></a>微服务调用</h3><p>在微服务架构中，最常见的场景就是微服务之间的相互调用。我们以电商系统中常见的用户下单为例来演示微服务的调用：客户向订单微服务发起一个下单的请求，在进行保存订单之前需要调用商品微服务查询商品的信息。<br>我们一般把服务的主动调用方称为<strong>服务消费者</strong>，把服务的被调用方称为<strong>服务提供者</strong>。    </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231243127.png">    </p>
<p>在这种场景下，订单微服务就是一个服务消费者， 商品微服务就是一个服务提供者。    </p>
<h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><p>创建一个maven工程，然后在pom.xml文件中添加下面内容    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud-alibaba&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;2.1.0.RELEASE&lt;/spring-cloudalibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">                &lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="variable">$&#123;spring-cloud-alibaba.version&#125;</span>&lt;/version&gt;</span><br><span class="line">                &lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>版本对应：    </p>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231248132.png">    </p>
<h2 id="创建基础模块"><a href="#创建基础模块" class="headerlink" title="创建基础模块"></a>创建基础模块</h2><ol>
<li>创建shop-common 模块，在pom.xml中添加依赖     </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud-alibaba&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;shop-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.56&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建实体类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//用户</span><br><span class="line">@Entity(name = <span class="string">&quot;shop_user&quot;</span>)</span><br><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Integer uid;//主键</span><br><span class="line">    private String username;//用户名</span><br><span class="line">    private String password;//密码</span><br><span class="line">    private String telephone;//手机号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//商品</span><br><span class="line">@Entity(name = <span class="string">&quot;shop_product&quot;</span>)</span><br><span class="line">@Data</span><br><span class="line">public class Product &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Integer pid;//主键</span><br><span class="line">    private String pname;//商品名称</span><br><span class="line">    private Double pprice;//商品价格</span><br><span class="line">    private Integer stock;//库存</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//订单</span><br><span class="line">@Entity(name = <span class="string">&quot;shop_order&quot;</span>)</span><br><span class="line">@Data</span><br><span class="line">public class Order &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long oid;//订单id</span><br><span class="line">    private Integer uid;//用户id</span><br><span class="line">    private String username;//用户名</span><br><span class="line">    private Integer pid;//商品id</span><br><span class="line">    private String pname;//商品名称</span><br><span class="line">    private Double pprice;//商品单价</span><br><span class="line">    private Integer number;//购买数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建用户微服务"><a href="#创建用户微服务" class="headerlink" title="创建用户微服务"></a>创建用户微服务</h2><p>步骤:<br>1.创建模块 导入依赖<br>2.创建SpringBoot主类<br>3.加入配置文件<br>4.创建必要的接口和实现类(controller service dao)    </p>
<p>新建一个shop-user 模块，然后进行下面操作    </p>
<ol>
<li>创建pom.xml    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud-alibaba&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;shop-user&lt;/artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shop-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>编写主类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class UserApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class， args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建配置文件    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 8071</span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: service-product</span><br><span class="line">    datasource:</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8&amp;useSSL=<span class="literal">true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: root</span><br><span class="line">    jpa:</span><br><span class="line">        properties:</span><br><span class="line">            hibernate:</span><br><span class="line">                hbm2ddl:</span><br><span class="line">                    auto: update</span><br><span class="line">                dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure>

<h2 id="创建商品微服务"><a href="#创建商品微服务" class="headerlink" title="创建商品微服务"></a>创建商品微服务</h2><ol>
<li>创建一个名为shop_product 的模块，并添加springboot依赖    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud-alibaba&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;shop-product&lt;/artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shop-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建工程的主类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class ProductApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProductApplication.class， args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建配置文件application.yml    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 8081</span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: service-product</span><br><span class="line">    datasource:</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8&amp;useSSL=<span class="literal">true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: root</span><br><span class="line">    jpa:</span><br><span class="line">        properties:</span><br><span class="line">            hibernate:</span><br><span class="line">                hbm2ddl:</span><br><span class="line">                    auto: update</span><br><span class="line">                dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>创建ProductDao接口    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public interface ProductDao extends JpaRepository&lt;Product,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>创建ProductService接口和实现类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class ProductServiceImpl implements ProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Product findByPid(Integer pid) &#123;</span><br><span class="line">        <span class="built_in">return</span> productDao.findById(pid).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>创建Controller    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class ProductController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductService productService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(<span class="string">&quot;/product/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Product product(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        Product product = productService.findByPid(pid);</span><br><span class="line">        log.info(<span class="string">&quot;查询到商品:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        <span class="built_in">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>启动工程，等到数据库表创建完毕之后，加入测试数据    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO shop_product VALUE(NULL,<span class="string">&#x27;小米&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>,<span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,<span class="string">&#x27;华为&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;3000&#x27;</span>,<span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line">INSERT INTO shop_product VALUE(NULL,<span class="string">&#x27;OPPO&#x27;</span>,<span class="string">&#x27;4000&#x27;</span>,<span class="string">&#x27;5000&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>通过浏览器访问服务    </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231305306.png">    </p>
<h2 id="创建订单微服务"><a href="#创建订单微服务" class="headerlink" title="创建订单微服务"></a>创建订单微服务</h2><ol>
<li>创建一个名为shop-order 的模块,并添加springboot依赖    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud-alibaba&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;shop-order&lt;/artifactId&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shop-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建工程的主类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建配置文件application.yml    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 8091</span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: service-product</span><br><span class="line">    datasource:</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql:///shop?serverTimezone=UTC&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8&amp;useSSL=<span class="literal">true</span></span><br><span class="line">        username: root</span><br><span class="line">        password: root</span><br><span class="line">    jpa:</span><br><span class="line">        properties:</span><br><span class="line">            hibernate:</span><br><span class="line">                hbm2ddl:</span><br><span class="line">                    auto: update</span><br><span class="line">                dialect: org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>创建OrderDao接口    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public interface OrderDao extends JpaRepository&lt;Order,Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>创建OrderService接口和实现类    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OrderServiceImpl implements OrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderDao orderDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void save(Order order) &#123;</span><br><span class="line">        orderDao.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>创建RestTemplate    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate <span class="function"><span class="title">getRestTemplate</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>创建Controller    </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line"></span><br><span class="line">    //准备买1件商品</span><br><span class="line">    @GetMapping(<span class="string">&quot;/order/prod/&#123;pid&#125;&quot;</span>)</span><br><span class="line">    public Order order(@PathVariable(<span class="string">&quot;pid&quot;</span>) Integer pid) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);</span><br><span class="line">        //通过restTemplate调用商品微服务</span><br><span class="line">        Product product = restTemplate.getForObject(<span class="string">&quot;http://localhost:8081/product/&quot;</span> + pid, Product.class);</span><br><span class="line">        log.info(<span class="string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));</span><br><span class="line">        Order order = new Order();</span><br><span class="line">        order.setUid(1);</span><br><span class="line">        order.setUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        order.setPid(product.getPid());</span><br><span class="line">        order.setPname(product.getPname());</span><br><span class="line">        order.setPprice(product.getPprice());</span><br><span class="line">        order.setNumber(1);</span><br><span class="line">        orderService.save(order);</span><br><span class="line">        <span class="built_in">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>启动工程,通过浏览器访问服务进行测试    </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/TheCitySnow/blog-img/202112231313313.png">    </p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows终端常用命令</title>
    <url>/2021/12/06/Windows%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>整理在Windwos环境下日常中常用的基础命令</p>
<span id="more"></span>

<h2 id="查找所有运行的端口"><a href="#查找所有运行的端口" class="headerlink" title="查找所有运行的端口"></a>查找所有运行的端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<h2 id="查看被占用端口对应的-PID"><a href="#查看被占用端口对应的-PID" class="headerlink" title="查看被占用端口对应的 PID"></a>查看被占用端口对应的 PID</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;8081&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看指定-PID-的进程"><a href="#查看指定-PID-的进程" class="headerlink" title="查看指定 PID 的进程"></a>查看指定 PID 的进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">&quot;9088&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /T /F /PID 9088</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC面试题</title>
    <url>/2021/12/11/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="什么是SpringMvc？"><a href="#什么是SpringMvc？" class="headerlink" title="什么是SpringMvc？"></a>什么是SpringMvc？</h3><pre><code>答：SpringMvc是spring的一个模块，基于MVC的一个框架，无需中间整合层来整合。
</code></pre>
<span id="more"></span>

<h3 id="Spring-MVC的优点："><a href="#Spring-MVC的优点：" class="headerlink" title="Spring MVC的优点："></a>Spring MVC的优点：</h3><pre><code>答：
1）它是基于组件技术的.全部的应用对象,无论控制器和视图,还是业务对象之类的都是 java组件.并且和Spring提供的其他基础结构紧密集成。
2）不依赖于Servlet API(目标虽是如此,但是在实现的时候确实是依赖于Servlet的)。
3）可以任意使用各种视图技术,而不仅仅局限于JSP。
4）支持各种请求资源的映射策略。
5）它应是易于扩展的。
</code></pre>
<h3 id="SpringMVC工作原理？"><a href="#SpringMVC工作原理？" class="headerlink" title="SpringMVC工作原理？"></a>SpringMVC工作原理？</h3><pre><code>答：
1）客户端发送请求到DispatcherServlet
2）DispatcherServlet查询handlerMapping找到处理请求的Controller
3）Controller调用业务逻辑后，返回ModelAndView
4）DispatcherServlet查询ModelAndView，找到指定视图
5）视图将结果返回到客户端
</code></pre>
<h3 id="SpringMVC流程？"><a href="#SpringMVC流程？" class="headerlink" title="SpringMVC流程？"></a>SpringMVC流程？</h3><pre><code>答：
1）用户发送请求至前端控制器DispatcherServlet。
2）DispatcherServlet收到请求调用HandlerMapping处理器映射器。
3）处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
4）DispatcherServlet调用HandlerAdapter处理器适配器。
5）HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。
6）Controller执行完成返回ModelAndView。
7）HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。
8）DispatcherServlet将ModelAndView传给ViewReslover视图解析器。
9）ViewReslover解析后返回具体View。
10）DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。
11）DispatcherServlet响应用户。
</code></pre>
<h3 id="SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决？"><a href="#SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决？" class="headerlink" title="SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决？"></a>SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决？</h3><pre><code>答：是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。
</code></pre>
<h3 id="如果你也用过struts2-简单介绍下springMVC和struts2的区别有哪些"><a href="#如果你也用过struts2-简单介绍下springMVC和struts2的区别有哪些" class="headerlink" title="如果你也用过struts2.简单介绍下springMVC和struts2的区别有哪些?"></a>如果你也用过struts2.简单介绍下springMVC和struts2的区别有哪些?</h3><pre><code>答：
1）springmvc的入口是一个servlet即前端控制器，而struts2入口是一个filter过虑器。
2）springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。
3）Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。
</code></pre>
<h3 id="SpingMvc中的控制器的注解一般用那个-有没有别的注解可以替代？"><a href="#SpingMvc中的控制器的注解一般用那个-有没有别的注解可以替代？" class="headerlink" title="SpingMvc中的控制器的注解一般用那个,有没有别的注解可以替代？"></a>SpingMvc中的控制器的注解一般用那个,有没有别的注解可以替代？</h3><pre><code>答：一般用@Conntroller注解,表示是表现层,不能用用别的注解代替。
</code></pre>
<h3 id="RequestMapping注解用在类上面有什么作用？"><a href="#RequestMapping注解用在类上面有什么作用？" class="headerlink" title="@RequestMapping注解用在类上面有什么作用？"></a>@RequestMapping注解用在类上面有什么作用？</h3><pre><code>答：是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。
</code></pre>
<h3 id="怎么样把某个请求映射到特定的方法上面？"><a href="#怎么样把某个请求映射到特定的方法上面？" class="headerlink" title="怎么样把某个请求映射到特定的方法上面？"></a>怎么样把某个请求映射到特定的方法上面？</h3><pre><code>答：直接在方法上面加上注解@RequestMapping,并且在这个注解里面写上要拦截的路径。
</code></pre>
<h3 id="如果在拦截请求中-我想拦截get方式提交的方法-怎么配置？"><a href="#如果在拦截请求中-我想拦截get方式提交的方法-怎么配置？" class="headerlink" title="如果在拦截请求中,我想拦截get方式提交的方法,怎么配置？"></a>如果在拦截请求中,我想拦截get方式提交的方法,怎么配置？</h3><pre><code>答：可以在@RequestMapping注解里面加上method=RequestMethod.GET。
</code></pre>
<h3 id="怎么样在方法里面得到Request-或者Session？"><a href="#怎么样在方法里面得到Request-或者Session？" class="headerlink" title="怎么样在方法里面得到Request,或者Session？"></a>怎么样在方法里面得到Request,或者Session？</h3><pre><code>答：直接在方法的形参中声明request,SpringMvc就自动把request对象传入。
</code></pre>
<h3 id="我想在拦截的方法里面得到从前台传入的参数-怎么得到？"><a href="#我想在拦截的方法里面得到从前台传入的参数-怎么得到？" class="headerlink" title="我想在拦截的方法里面得到从前台传入的参数,怎么得到？"></a>我想在拦截的方法里面得到从前台传入的参数,怎么得到？</h3><pre><code>答：直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样。
</code></pre>
<h3 id="如果前台有很多个参数传入-并且这些参数都是一个对象的-那么怎么样快速得到这个对象？"><a href="#如果前台有很多个参数传入-并且这些参数都是一个对象的-那么怎么样快速得到这个对象？" class="headerlink" title="如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？"></a>如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？</h3><pre><code>答：直接在方法中声明这个对象,SpringMvc就自动会把属性赋值到这个对象里面。
</code></pre>
<h3 id="SpringMvc中函数的返回值是什么？"><a href="#SpringMvc中函数的返回值是什么？" class="headerlink" title="SpringMvc中函数的返回值是什么？"></a>SpringMvc中函数的返回值是什么？</h3><pre><code>答：返回值可以有很多类型,有String, ModelAndView,当一般用String比较好。
</code></pre>
<h3 id="SpringMVC怎么样设定重定向和转发的？"><a href="#SpringMVC怎么样设定重定向和转发的？" class="headerlink" title="SpringMVC怎么样设定重定向和转发的？"></a>SpringMVC怎么样设定重定向和转发的？</h3><pre><code>答：在返回值前面加&quot;forward:&quot;就可以让结果转发,譬如&quot;forward:user.do?name=method4&quot; 在返回值前面加&quot;redirect:&quot;就可以让返回值重定向,譬如&quot;redirect:http://www.baidu.com&quot;。
</code></pre>
<h3 id="SpringMvc用什么对象从后台向前台传递数据的？"><a href="#SpringMvc用什么对象从后台向前台传递数据的？" class="headerlink" title="SpringMvc用什么对象从后台向前台传递数据的？"></a>SpringMvc用什么对象从后台向前台传递数据的？</h3><pre><code>答：通过ModelMap对象,可以在这个对象里面用put方法,把对象加到里面,前台就可以通过el表达式拿到。
</code></pre>
<h3 id="SpringMvc中有个类把视图和数据都合并的一起的-叫什么？"><a href="#SpringMvc中有个类把视图和数据都合并的一起的-叫什么？" class="headerlink" title="SpringMvc中有个类把视图和数据都合并的一起的,叫什么？"></a>SpringMvc中有个类把视图和数据都合并的一起的,叫什么？</h3><pre><code>答：叫ModelAndView。
</code></pre>
<h3 id="怎么样把ModelMap里面的数据放入Session里面？"><a href="#怎么样把ModelMap里面的数据放入Session里面？" class="headerlink" title="怎么样把ModelMap里面的数据放入Session里面？"></a>怎么样把ModelMap里面的数据放入Session里面？</h3><pre><code>答：可以在类上面加上@SessionAttributes注解,里面包含的字符串就是要放入session里面的key。
</code></pre>
<h3 id="SpringMvc怎么和AJAX相互调用的？"><a href="#SpringMvc怎么和AJAX相互调用的？" class="headerlink" title="SpringMvc怎么和AJAX相互调用的？"></a>SpringMvc怎么和AJAX相互调用的？</h3><pre><code>答：通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象。
具体步骤如下 ：
1）加入Jackson.jar。
2）在配置文件中配置json的映射。
3）在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解。
</code></pre>
<h3 id="当一个方法向AJAX返回特殊对象-譬如Object-List等-需要做什么处理？"><a href="#当一个方法向AJAX返回特殊对象-譬如Object-List等-需要做什么处理？" class="headerlink" title="当一个方法向AJAX返回特殊对象,譬如Object,List等,需要做什么处理？"></a>当一个方法向AJAX返回特殊对象,譬如Object,List等,需要做什么处理？</h3><pre><code>答：要加上@ResponseBody注解
</code></pre>
<h3 id="SpringMvc里面拦截器是怎么写的？"><a href="#SpringMvc里面拦截器是怎么写的？" class="headerlink" title="SpringMvc里面拦截器是怎么写的？"></a>SpringMvc里面拦截器是怎么写的？</h3><pre><code>答：有两种写法,一种是实现接口,另外一种是继承适配器类,然后在SpringMvc的配置文件中配置拦截器即可：
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置SpringMvc的拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!-- 配置一个拦截器的Bean就可以了 默认是对所有请求都拦截 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;myInterceptor&quot;</span> class=<span class="string">&quot;com.et.action.MyHandlerInterceptor&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 只针对部分请求拦截 --&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path=<span class="string">&quot;/modelMap.do&quot;</span> /&gt;</span><br><span class="line">        &lt;bean class=<span class="string">&quot;com.et.action.MyHandlerInterceptorAdapter&quot;</span> /&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>

<h3 id="讲下SpringMvc的执行流程"><a href="#讲下SpringMvc的执行流程" class="headerlink" title="讲下SpringMvc的执行流程"></a>讲下SpringMvc的执行流程</h3><pre><code>答：系统启动的时候根据配置文件创建spring的容器, 首先是发送http请求到核心控制器disPatherServlet，spring容器通过映射器去寻找业务控制器，使用适配器找到相应的业务类，在进业务类时进行数据封装，在封装前可能会涉及到类型转换，执行完业务类后使用ModelAndView进行视图转发，数据放在model中，用map传递数据进行页面显示。
</code></pre>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
